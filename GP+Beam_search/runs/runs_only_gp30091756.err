/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/main.py:45: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(config.model_weights_path)["state_dict"])
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/common/software/nersc/pe/conda-envs/24.1.0/python-3.11/nersc-python/lib/python3.11/site-packages/numpy/core/_methods.py:173: RuntimeWarning: invalid value encountered in subtract
  x = asanyarray(arr - arrmean)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/main.py:45: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(config.model_weights_path)["state_dict"])
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/main.py:45: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(config.model_weights_path)["state_dict"])
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/common/software/nersc/pe/conda-envs/24.1.0/python-3.11/nersc-python/lib/python3.11/site-packages/numpy/core/_methods.py:173: RuntimeWarning: invalid value encountered in subtract
  x = asanyarray(arr - arrmean)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/common/software/nersc/pe/conda-envs/24.1.0/python-3.11/nersc-python/lib/python3.11/site-packages/numpy/core/_methods.py:176: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/main.py:45: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(config.model_weights_path)["state_dict"])
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/common/software/nersc/pe/conda-envs/24.1.0/python-3.11/nersc-python/lib/python3.11/site-packages/numpy/core/_methods.py:173: RuntimeWarning: invalid value encountered in subtract
  x = asanyarray(arr - arrmean)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/main.py:45: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(config.model_weights_path)["state_dict"])
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/common/software/nersc/pe/conda-envs/24.1.0/python-3.11/nersc-python/lib/python3.11/site-packages/numpy/core/_methods.py:173: RuntimeWarning: invalid value encountered in subtract
  x = asanyarray(arr - arrmean)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/main.py:45: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(config.model_weights_path)["state_dict"])
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/common/software/nersc/pe/conda-envs/24.1.0/python-3.11/nersc-python/lib/python3.11/site-packages/numpy/core/_methods.py:173: RuntimeWarning: invalid value encountered in subtract
  x = asanyarray(arr - arrmean)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/gp.py:74: RuntimeWarning: overflow encountered in scalar power
  sqerrors = ((((func(*x) - y)**2)/len(points)) for x, y in points)
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/main.py:45: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(config.model_weights_path)["state_dict"])
/global/u2/s/samyak09/GSOC-SR/GSOC-24-SR/GP+Beam_search/main.py:45: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(config.model_weights_path)["state_dict"])
slurmstepd: error: *** STEP 30091756.0 ON nid008353 CANCELLED AT 2024-09-04T00:23:27 DUE TO TIME LIMIT ***
slurmstepd: error: *** JOB 30091756 ON nid008353 CANCELLED AT 2024-09-04T00:23:27 DUE TO TIME LIMIT ***
srun: Job step aborted: Waiting up to 32 seconds for job step to finish.
